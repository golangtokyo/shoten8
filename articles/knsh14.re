= templateのlinterを作ろう

== tempalteを静的解析するモチベーション
text/templateはかなりいろいろな場面で使われている。
go listコマンドの表示形式を変更させたり、コード生成にも使われる。
text/templateを利用したテンプレートはパイプラインやブロックなどを用いてかなり複雑なテンプレートが作れる。

そういったテンプレートは事前にクリティカルなものはparseでチェックできるが、実行時に失敗するものもある。

こういったものを事前にチェックしたい。

Go自体には静的解析のパッケージが充実している。
これの一部を真似るような形でテンプレートでも静的解析をやっていく。

== text/templateのパーサ

text/template.Tempalte.Parseでは何が行われているのか見ていく。
インタプリタをパースしていくようにお手製のパーサーが存在し、ASTにしていく。

== text/templateの抽象構文木
どんなASTのノードがあるのか紹介する

== テンプレートを静的解析する
実際にかんたんなlinterを作っていく。
unusedとかがかんたんなのかな？

