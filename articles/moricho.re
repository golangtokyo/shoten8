= Goによるコンテナランタイム自作入門

== はじめに
こんにちは、@_moricho_@<fn>{_moricho_}です。
〜〜〜

//footnote[_moricho_][@<href>{https://twitter.com/_moricho_}]

== コンテナランタイムとは？
コンテナランタイムはコンテナの実行管理をするものです。コンテナランタイムは大きく分けて「ハイレベルコンテナランタイム」と「ローレベルランタイム」に分割されます。
例えばDockerなどのコンテナを扱う際は、基本的に「ハイレベルランタイム => ローレベルランタイム」の順で処理が流れていきます。

1. ハイレベルランタイム
ハイレベルランタイムでは直接コンテナを操作するわけではなく、その次のローレベルランタイムへ命令を渡す役割を果たします。
またここではイメージの管理(pull/push/rm…)も担います。

2.  ローレベルランタイム
ハイレベルランタイムから受け取った指示でコンテナの起動や停止をキックするなど、コンテナの直接的な操作を担当する部分です。
今回は、コンテナのコアとなるこの部分を作っていきます。


== コンテナの概要

ここでは、コンテナをコンテナたらしめている仕組みをざっくり説明します。
実際にコンテナランタイムを実装していく上で見通しをよくするためにも必要になる知識ですので、ざっと理解しておきましょう。

=== コンテナとは？
コンテナを一言で言うとなんでしょうか？コンテナとは「ホストOSのリソースを隔離・制限したプロセス」と言えます。
プロセスであるため、通常のアプリケーションと遜色ないレベルで素早く実行できます。また、ホストOSとリソースを共有しているのがポイントです。

=== なぜ異なるOSベースのイメージが動くの？
普段何気なく使っているコンテナ技術ですが、そもそもなんでホストと異なるOSのイメージが動くのか不思議に思ったことがある方も多いのではないのでしょうか？
まず前提として、あるホストの上で全てのOSイメージが動くわけではありません。あくまでも、
・異なるLinuxディストリビューション
・同じLinuxディストリビューションの異なるバージョン
が対象であり、例えばUbuntuの上でWindowsは動きません。

（ではなぜMacの上でCentOSやUbuntuが動くのか。Docker for Macの簡単な説明）

コンテナはOS機能を全て再現するものではなく、あくまでも特定のディストリビューション上のアプリケーションの動きを再現するものなのです。そしてそのキーとなるものが「Linuxカーネル」と「ファイルシステム」です。

1. Linuxカーネル

2. ファイルシステム


== 実装

（ローレベル）コンテナランタイムを作るにあたり私たちが実装するべきものは、
・カーネルリソースの隔離
・ファイルシステムの隔離
・ハードウェアリソースの制限
の大きく3つです。
それぞれ詳しく見ていきましょう。


=== 1.Namespaces
カーネルリソースの隔離

=== 2.chroot
ファイルシステムの隔離

=== 3.cgroup
ハードウェアリソースの制限


== GoでCLI作成

== 自作コンテナをさらに拡張する

== 終わりに
